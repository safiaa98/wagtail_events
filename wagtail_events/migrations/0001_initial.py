# Generated by Django 2.1.4 on 2019-03-20 11:01

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.contrib.routable_page.models
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0040_page_draft_title'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('paginate_by', models.PositiveIntegerField(blank=True, null=True)),
                ('body', wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.TextBlock(help_text='Tell people about what kind of events you run', label='Events page text', required=False)), ('quote', wagtail.core.blocks.BlockQuoteBlock(help_text='Add an inspirational quote!', required=False))], blank=True, help_text='Specify what people see when they reach the events page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='EventSeries',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.core.fields.StreamField([('heading', wagtail.core.blocks.CharBlock(help_text="Add optional subheadings between paragraphs, if you're describing the event in more detail", label='Event / Event Series description subheading', max_length=120, required=False)), ('paragraph', wagtail.core.blocks.TextBlock(help_text='Tell people about the event or event series', label='Event / Event Series description text', required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Add images to describe the event or event series.', label='Event / Event Series Image(s)', required=False))], blank=True, help_text='Add a description of this event or event series.')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='SubEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(blank=True, help_text='Title for this event, e.g. the lecture name in an event series', max_length=120)),
                ('body', wagtail.core.fields.StreamField([('heading', wagtail.core.blocks.CharBlock(help_text="Add optional subheadings between paragraphs, if you're describing the event in more detail", label='Sub-event description subheading', max_length=120, required=False)), ('paragraph', wagtail.core.blocks.TextBlock(help_text='Tell people about the event', label='Sub-event description text', required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Add images to the event.', label='Sub-event image', required=False)), ('quote', wagtail.core.blocks.BlockQuoteBlock(help_text='Add an inspirational quote!', required=False))], blank=True, help_text='Optional information specific to this particular event date')),
                ('event_series', modelcluster.fields.ParentalKey(help_text='The main event or event series', on_delete=django.db.models.deletion.CASCADE, related_name='sub_events', to='wagtail_events.EventSeries')),
            ],
            options={
                'ordering': ['start_date'],
                'abstract': False,
            },
        ),
    ]
